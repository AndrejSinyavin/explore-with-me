{
	"info": {
		"_postman_id": "abc0a26d-698a-4ec9-b743-d16f71092279",
		"name": "\"Explore with me\" - API 'Рейтинги'",
		"description": "Система рейтингов сервиса \"Explore with me\". Пробная версия, изначально предполагалось вести по 4 категориям \"интереса\" и оценки: рейтинг интереса пользователей к предполагаемому событию, рейтинг участников прошедшего мероприятия, рейтинг организатора мероприятия от его участников, и рейтинг интересности составленной подборки. Данные тесты - для демо-функциональности первого варианта. Предполагается, что ожидаемость имеет одну градацию - \"интересно\" (защита от хейтеров), и создается только один раз, только зарегистрированными участниками сервиса, и только для еще не начатых событий. Задача - оценить \"всплески\" интересов и тренды. Вторая функциональность поможет оценить \"удовлетворенность ожиданий\" - это рейтинг начатому/законченному событию от его участников. Этот рейтинг более \"эмоционален\" и неоднороден, поэтому ведется по 10-балльной шкале для сглаживания средней оценки - берется средне-арифметическое оценок только участвовавших. Функциональность реализована, но написать тесты, обходящие контроль за временными метками и уровни доступа, в Постмане я пока не в состоянии))",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31307097",
		"_collection_link": "https://yandex-prakticum-team-2.postman.co/workspace/0d7da322-eeef-425b-86a0-ab8b3d991e95/collection/31307097-abc0a26d-698a-4ec9-b743-d16f71092279?action=share&source=collection_link&creator=31307097"
	},
	"item": [
		{
			"name": "Рейтинг для предстоящих событий 'Пользователей заинтересовало это событие'",
			"item": [
				{
					"name": "Пользователь отмечает предстоящее событие как 'интересное'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Тело ответа отсутствует\", function () {\r",
									"     pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const owner = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        let event = await api.addEvent(owner.id, eventBody);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"        pm.collectionVariables.set('eid', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/expectations/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"expectations",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Обязательный параметр) Идентификатор пользователя, выполняющего запрос"
								},
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Обязательный параметр) Идентификатор предполагаемого события"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пользователь пытается отметить неопубликованное событие",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и тело с информацией об ошибке\", () => {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const owner = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        let event = await api.addEvent(owner.id, eventBody);\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"        pm.collectionVariables.set('eid', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/expectations/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"expectations",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Обязательный параметр) Идентификатор пользователя, выполняющего запрос"
								},
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Обязательный параметр) Идентификатор предполагаемого события"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пользователь пытается отметить уже начатое или закончившееся событие",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и тело с информацией об ошибке\", () => {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const owner = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getLastEvent(category.id);\r",
									"        let event = await api.addEvent(owner.id, eventBody);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"        pm.collectionVariables.set('eid', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/expectations/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"expectations",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Обязательный параметр) Идентификатор пользователя, выполняющего запрос"
								},
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Обязательный параметр) Идентификатор предполагаемого события"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пользователь пытается повторно отметить уже помеченное событие",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и тело с информацией об ошибке\", () => {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const owner = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        let event = await api.addEvent(owner.id, eventBody);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/users/\" + owner.id + \"/expectations/\" + event.id, method: 'POST'});          \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/expectations/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"expectations",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Обязательный параметр) Идентификатор пользователя, выполняющего запрос"
								},
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Обязательный параметр) Идентификатор предполагаемого события"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Просмотр рейтинга события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const owner = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        let event = await api.addEvent(owner.id, eventBody);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/users/\" + owner.id + \"/expectations/\" + event.id, method: 'POST'});\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const eventid = pm.collectionVariables.get('eid');\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, annotation, expectationRate, category, initiator, initiatorRate, views, confirmedRequests, eventDate, createdOn, paid,  location, description\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('expectationRate');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('initiatorRate');\r",
									"pm.expect(target).to.have.property('views');\r",
									"pm.expect(target).to.have.property('confirmedRequests');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('description');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле expectationRate должно быть равно 1\", function () {\r",
									"    pm.expect(target.id).equal(eventid);\r",
									"    pm.expect(target.expectationRate).equal(1, 'Рейтинг \"ожидаемости\" события должен быть увеличен на 1');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ratings/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Обязательный параметр) Идентификатор просматриваемого события"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить \"Топ\" предстоящих событий по заинтересованности потенциальными участниками",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const owner = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        let event1 = await api.addEvent(owner.id, eventBody1);\r",
									"        let eventBody2 = rnd.getEvent(category.id);\r",
									"        let event2 = await api.addEvent(owner.id, eventBody2);\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"        pm.collectionVariables.set(\"eid1\", event1.id)\r",
									"        pm.collectionVariables.set(\"eid2\", event2.id)\r",
									"        pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/users/\" + user1.id + \"/expectations/\" + event1.id, method: 'POST'});\r",
									"        pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/users/\" + user2.id + \"/expectations/\" + event1.id, method: 'POST'});\r",
									"        pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/users/\" + owner.id + \"/expectations/\" + event2.id, method: 'POST'});    \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ratings/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addEventExpectationRating(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/ratings/' + eventId, null, \"Ошибка при добавлении отметки 'заинтересованности' в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошибка.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    resolve(response.json());\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getLastEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getPastDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getPastDateTime(hourShift = -5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "",
			"type": "default"
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eid",
			"value": ""
		},
		{
			"key": "eid1",
			"value": ""
		},
		{
			"key": "eid2",
			"value": ""
		}
	]
}